import 'package:flutter/material.dart';
import 'dart:math';

class BanditManchotHomePage extends StatefulWidget {
  const BanditManchotHomePage({super.key, required this.title});

  final String title;

  @override
  State<BanditManchotHomePage> createState() => _BanditManchotHomePageState();
}

class _BanditManchotHomePageState extends State<BanditManchotHomePage> {
  List<String> images = [
    'images/bar.png',
    'images/cerise.png',
    'images/cloche.png',
    'images/diamant.png',
    'images/fer-a-cheval.png',
    'images/pasteque.png',
    'images/sept.png',
  ];

  List<String> displayedImages =
      []; //Contient les trois images actuellement visibles.//
  Random random = Random();

  bool isPlaying =
      false; //je vais d√©sactiver le bouton une fois cliqu√© et le r√©activer apr√®s la dur√©e du SnackBar.

//L‚Äôavantage d‚Äôutiliser initState() est que cela ne se produit qu'une seule fois, au tout d√©but, ce qui est pratique lorsque l'on veut faire des pr√©parations qui ne changent pas souvent.
  @override
  void initState() {
    //Utilis√©e pour initialiser l'√©tat du widget avec trois images al√©atoires au lancement de l'application. cela signifie que nous prenons une fonction (initState()) qui existe d√©j√† dans la classe de base, et nous la personnalisons pour l‚Äôutiliser dans notre propre contexte.
    super.initState();
    // Initialiser avec trois images al√©atoires, change √† chaque fois qu'on rafraichit la page
    displayedImages = List.generate(
        3,
        (index) => images[random.nextInt(images
            .length)]); //random.nextInt(images.length) g√©n√®re un nombre al√©atoire compris entre 0 et le nombre total d‚Äôimages dans notre liste (images). Chaque nombre correspond √† une position dans la liste images.
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        centerTitle: true,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              for (int i = 0; i < 3; i++)
                AnimatedSwitcher(
                  //Ce widget est utilis√© pour effectuer une transition anim√©e chaque fois que l'enfant du widget change. Ici, je l utilise pour chaque image afin d'avoir une animation lors de la mise √† jour des symboles.
                  duration: const Duration(milliseconds: 500),
                  transitionBuilder: //Utilis√© pour d√©finir le type d'animation de transition. j utilise un ScaleTransition pour donner l'effet de zoom avant/arri√®re des images.
                      (Widget child, Animation<double> animation) {
                    return ScaleTransition(scale: animation, child: child);
                  },
                  child: Image.asset(
                    displayedImages[i],
                    key: ValueKey<String>(displayedImages[
                        i]), //Assure que chaque image est trait√©e comme une entit√© unique, ce qui permet √† Flutter de savoir quelles images ont chang√©. ValueKey<String> car chaque image est repr√©sent√©e par une cha√Æne de caract√®res (le chemin du fichier d'image),
                    width: 80,
                    height: 80,
                  ),
                ),
              const SizedBox(width: 20),
            ],
          ),
          const SizedBox(height: 40),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 20),
              textStyle: const TextStyle(fontSize: 24),
            ),
            onPressed: isPlaying
                ? null // D√©sactivation du bouton pendant que le jeu est en cours, le bouton est d√©sactiv√© (null emp√™che l'utilisateur de cliquer dessus
                : () {
                    setState(() {
                      isPlaying = true; // D√©sactivation du bouton

                      // G√©n√©reration de trois nouvelles images al√©atoires
                      displayedImages = List.generate(
                          3, (index) => images[random.nextInt(images.length)]);

                      // V√©rification: si les trois images sont identiques
                      if (displayedImages[0] == displayedImages[1] &&
                          displayedImages[1] == displayedImages[2]) {
                        // Affichage d un message de Jackpot
                        if (displayedImages[0] == 'images/sept.png') {
                          // Animation sp√©ciale pour le Jackpot avec le symbole 7
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text(
                                'Jackpot sp√©cial avec le symbole 7 ! ü•≥',
                                style: TextStyle(
                                    fontSize: 20, color: Colors.yellow),
                              ),
                              backgroundColor: Colors.purple,
                              duration: Duration(seconds: 2),
                            ),
                          );
                        } else {
                          // Affichage d'un message de Jackpot normal
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text(
                                'Jackpot ! Vous avez gagn√© ! :)',
                                style: TextStyle(
                                    fontSize: 18, color: Colors.white),
                              ),
                              backgroundColor: Colors.green,
                              duration: Duration(seconds: 2), //
                            ),
                          );
                        }
                      } else {
                        // Affichage d un message de perte
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text(
                              'Dommage, essayez encore ! :(',
                              style:
                                  TextStyle(fontSize: 18, color: Colors.white),
                            ),
                            backgroundColor:
                                Colors.red, // D√©finition: une couleur de fond
                            duration: Duration(seconds: 2),
                          ),
                        );
                      }

                      // R√©activation: le bouton apr√®s la dur√©e du SnackBar
                      Future.delayed(const Duration(seconds: 2), () {
                        setState(() {
                          isPlaying =
                              false; // R√©activation: le bouton apr√®s 2 secondes
                        });
                      });
                    });
                  },
            child: const Text('Jouer'),
          ),
          const SizedBox(
            height: 20,
          ),
          const Text(
              "le bouton 'Jouer' sera d√©sactiv√© apr√®s chaque clic, ce qui emp√™che l'utilisateur de cliquer trop rapidement. Ainsi, le message affich√© sera en concordance avec l √©tat des images visibles √† l √©cran.")
        ],
      ),
    );
  }
}
